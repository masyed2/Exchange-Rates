{"version":3,"sources":["logo.svg","lib.js","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","convert","amount","from","to","currencies","toFixed","FormModified","styled","Form","Group","FieldSet","Container","SpaceMobile","div","formSelect","Main","React","useState","setAmount","setFrom","converted","setConverted","setTo","setCurrencies","useEffect","Axios","get","then","res","data","rates","catch","err","console","log","val","fluid","Row","Col","xs","sm","controlId","className","Label","Control","type","placeholder","value","onChange","e","target","as","style","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c1ac5ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function convert(amount, from, to, currencies) {\r\n    let convert\r\n    \r\n    if (from == 'EUR') {\r\n        convert = amount * currencies[to];\r\n    } else {\r\n        if (to == 'EUR') {\r\n            convert = amount / currencies[from];\r\n        } else {\r\n            convert = amount / currencies[from];\r\n            convert *= currencies[to];\r\n        }\r\n    }\r\n\r\n    return (convert.toFixed(2));\r\n}","import React from 'react';\r\nimport { Form,  Row, Col, Container } from \"react-bootstrap\";\r\nimport styled from 'styled-components';\r\nimport Axios from 'axios';\r\nimport { convert } from '../lib';\r\n\r\nconst FormModified = styled(Form.Group)`\r\nwidth: 100%;\r\n`\r\n\r\nconst FieldSet = styled(Container)`\r\nborder: 1px solid ;\r\nmax-width: 510px;\r\nmargin-top: 100px;\r\npadding: 20px;\r\n`\r\nconst SpaceMobile = styled.div`\r\ndisplay: none;\r\n\r\n@media(max-width: 768px) {\r\n    margin: 30px auto;\r\n    display: block;\r\n    height: 1px;\r\n    background: black;\r\n}\r\n`\r\n\r\nconst formSelect = {};\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const [amount, setAmount] = React.useState(0);\r\n    const [from, setFrom] = React.useState('EUR');\r\n    const [converted, setConverted] = React.useState(0);\r\n    const [to, setTo] = React.useState('USD');\r\n\r\n    const [currencies, setCurrencies] = React.useState([])\r\n\r\n\r\n    React.useEffect(() => {\r\n        // store all currencies from api in state\r\n        const api = 'http://data.fixer.io/api/latest?access_key=cf0d6aecd1009775a81c453922afdbb0&format=1'\r\n\r\n        Axios.get(api).then(res => {\r\n            setCurrencies(res.data.rates);\r\n        }).catch(err => console.log('error from api', err));\r\n        \r\n    }, [])\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (currencies[from]) {\r\n            const val = convert(amount, from, to, currencies);\r\n            setConverted(val);\r\n        }\r\n        \r\n    }, [from, to])\r\n\r\n    console.log('check')\r\n\r\n    function handleReverseConvert(e) {\r\n        setConverted(e.target.value)\r\n\r\n        const val = convert(e.target.value, to, from, currencies);\r\n        setAmount(val);\r\n    }\r\n\r\n    function handleAmountChange(e) {\r\n        setAmount(e.target.value)\r\n\r\n        const val = convert(e.target.value, from, to, currencies);\r\n        setConverted(val);\r\n    }\r\n\r\n    return (\r\n            <FieldSet fluid>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <FormModified controlId=\"formBasicEmail\" className='text-left'>\r\n                            <Form.Label>Type in amount and select currency :</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"0.00\" value={amount} \r\n                                onChange={handleAmountChange} />\r\n                        </FormModified> \r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                        <Form.Label>&nbsp;</Form.Label>\r\n                        <Form.Control as=\"select\" style={formSelect} \r\n                            onChange={e => setFrom(e.target.value)} value={from}>\r\n                            <option value='USD'>USD</option>\r\n                            <option value='CAD'>CAD</option>\r\n                            <option value='EUR'>EUR</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    </Col>     \r\n                </Row>\r\n                <Row>\r\n                    <Col><SpaceMobile /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <FormModified controlId=\"formGroupEmail\"  className='text-left'>\r\n                            <Form.Label>Converted amount :</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"0.00\" value={converted} \r\n                                onChange={handleReverseConvert}/>\r\n                        </FormModified> \r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                            <Form.Label>&nbsp;</Form.Label>\r\n                            <Form.Control as=\"select\" style={formSelect} value={to} onChange={e => setTo(e.target.value)}>\r\n                                <option value='USD'>USD</option>\r\n                                <option value='CAD'>CAD</option>\r\n                                <option value='EUR'>EUR</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <p className='text-right'>\r\n                            <a href='#' className='' target='_blank'>Disclaimer</a>\r\n                        </p>\r\n                    </Col>     \r\n                </Row>     \r\n            </FieldSet>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}